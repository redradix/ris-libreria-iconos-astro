---
// @ts-nocheck
import { formatIcons, getAvailableSizes } from "../app/icons/business";
import fetchIcons from "../app/icons/api";
import Layout from "../layouts/Layout.astro";
import Footer from "../layouts/Footer.astro";
import Card from "../components/Card.astro";
import { Icon } from "astro-icon";
export let serverComponent = true;
let icons = await fetchIcons();
icons = formatIcons(icons);
const sizes = getAvailableSizes(icons);
const defaultSize = sizes[0];
---

<Layout title="RedRadix Icon Library">
  <main>
    <div class="wrapper">
      <header class="sidebar region innerspace">
        <h1>RedRadix</h1>
        <p>
          Responsive iconography and illustrations gallery: Find images
          optimized to fit any device and screen size.
        </p>
      </header>
    </div>

    <a href="#settings" class="skip-link">Skip to settings</a>

    <section class="iconcontainer matched-radius">
      {
        icons.error ? (
          <p>An error occurred. Please try again</p>
        ) : (
          <div class="wrapper grid">
            {Object.entries(icons).map(([iconName, iconData]) =>
              iconData ? (
                <Card name={iconName} svgData={iconData[defaultSize].svgData} />
              ) : null
            )}
          </div>
        )
      }
      <div class="wrapper">
        <div class="innerspace-extended">
          <section class="control cluster">
            <a
              class="with-icon"
              href="https://redradix.webflow.io/"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Icon name="logo-s" /> RedRadix 2023</a
            >
            <nav id="settings" class="sizes" aria-label="Select icon size">
              {
                sizes.map((size, index) => (
                  <button
                    class={size === defaultSize ? "active" : ""}
                    type="button"
                    data-size={size}
                    id={`size-button-${index}`}
                    aria-selected={size === defaultSize ? "true" : "false"}
                  >
                    {size}
                  </button>
                ))
              }
            </nav>
            <button type="button" id="export-all-svg" class="plain"
              >Export all
            </button>
          </section>
        </div>
      </div>
    </section>
  </main>
</Layout>

<Footer />

<style>
  .grid {
    gap: var(--matched-radius-inner-size);
    --custom-gutter: 0;
  }

  h1 {
    --sidebar-target-width: 33rem;
  }

  header p {
    font-size: var(--size-step-2);
  }

  section.iconcontainer {
    border: 1px solid var(--color-wine-alpha);
  }

  section.control {
    margin-block-start: var(--matched-radius-padding);
    border-radius: var(--border-radius);
    background-color: var(--color-white);
    padding: 0.8rem;
  }

  section.control .sizes {
    display: flex;
    gap: var(--space-xs);
  }

  section.control button {
    font-size: var(--size-step-minus-1);
    padding: 0.5em 1em;
  }

  section.control button:where(:hover, :focus, .active) {
    --color: var(--color-white);
    --bgcolor: var(--color-wine);
    outline-color: var(--color-wine);
  }

  button.plain {
    /* all: unset; */
    --color: var(--color-wine);
    --bgcolor: var(--color-white);
    border: 1px solid var(--color-white);
  }
  button.plain:hover {
    border: 1px solid var(--color-wine);
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"
></script>

<script client:load define:vars={{ sizes, icons, defaultSize }}>
  function handleSizeButtonClick(size, event) {
    const elements = document.querySelectorAll(`[data-name]`);

    elements.forEach((element) => {
      const name = element.getAttribute("data-name");
      const svgData = icons[name][size].svgData;

      const svgElement = element.querySelector(".icon");
      svgElement.innerHTML = svgData;

      const sizeIndex = sizes.indexOf(size);
      const sizeClass = `size-${sizeIndex}`;
      element.classList.remove(
        ...sizes.map((size) => `size-${sizes.indexOf(size)}`)
      );
      element.classList.add(sizeClass);
    });

    const buttons = document.querySelectorAll(`[data-size]`);
    buttons.forEach((button) => {
      button.classList.remove("active");
    });

    const selectedButton = document.querySelector(`[data-size="${size}"]`);
    selectedButton.classList.add("active");
  }

  sizes.forEach((size, index) => {
    const button = document.getElementById(`size-button-${index}`);
    button.addEventListener("click", (event) =>
      handleSizeButtonClick(size, event)
    );
  });

  function exportAllSvg() {
    const zip = new window.JSZip();
    const folder = zip.folder("icons");

    Object.entries(icons).forEach(([iconName, iconData]) => {
      const svgData = iconData[defaultSize].svgData;
      folder.file(`${iconName}.svg`, svgData);
    });

    zip.generateAsync({ type: "blob" }).then((content) => {
      const link = document.createElement("a");
      link.href = URL.createObjectURL(content);
      link.download = "icons.zip";
      link.style.display = "none";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
  }

  const exportAllSvgButton = document.getElementById("export-all-svg");
  exportAllSvgButton.addEventListener("click", exportAllSvg);
</script>
